import type { AIDesignStep } from '../../../types/ai.types';
import './AIStepNavigation.css';

interface AIStepNavigationProps {
  currentStep: AIDesignStep;
  onStepChange: (step: AIDesignStep) => void;
  canGoNext?: boolean;
  canGoPrev?: boolean;
}

interface AIStepInfo {
  key: AIDesignStep;
  title: string;
  icon: string;
  description: string;
}

const AI_STEPS: AIStepInfo[] = [
  {
    key: 'model',
    title: 'AI„É¢„Éá„É´',
    icon: 'ü§ñ',
    description: 'ChatGPT/GeminiÈÅ∏Êäû'
  },
  {
    key: 'basic',
    title: 'Âü∫Êú¨Ë®≠ÂÆö',
    icon: 'üêü',
    description: '‰ΩìÂûã„ÉªËâ≤„ÉªÊÄßÊ†º„ÇíË®≠ÂÆö'
  },
  {
    key: 'details',
    title: 'Ë©≥Á¥∞Ë®≠ÂÆö',
    icon: '‚ú®',
    description: '„Éí„É¨„ÉªÁõÆ„ÉªÊ®°Êßò„ÇíÈÅ∏Êäû'
  },
  {
    key: 'accessory',
    title: '„Ç¢„ÇØ„Çª„Çµ„É™„Éº',
    icon: 'üëë',
    description: 'Ë£ÖÈ£æÂìÅ„ÇíËøΩÂä†'
  },
  {
    key: 'generate',
    title: 'AIÁîüÊàê',
    icon: 'üé®',
    description: '„Ç´„Çπ„Çø„É†Ë¶ÅÊúõ„ÅßÁîüÊàê'
  }
];

export default function AIStepNavigation({ 
  currentStep, 
  onStepChange, 
  canGoNext = true, 
  canGoPrev = true 
}: AIStepNavigationProps) {
  
  const getCurrentStepIndex = () => {
    return AI_STEPS.findIndex(step => step.key === currentStep);
  };

  const handleStepClick = (step: AIDesignStep) => {
    onStepChange(step);
  };

  const handlePrevious = () => {
    const currentIndex = getCurrentStepIndex();
    if (currentIndex > 0 && canGoPrev) {
      onStepChange(AI_STEPS[currentIndex - 1].key);
    }
  };

  const handleNext = () => {
    const currentIndex = getCurrentStepIndex();
    if (currentIndex < AI_STEPS.length - 1 && canGoNext) {
      onStepChange(AI_STEPS[currentIndex + 1].key);
    }
  };

  const currentStepIndex = getCurrentStepIndex();

  return (
    <div className="ai-step-navigation">
      {/* „Çπ„ÉÜ„ÉÉ„Éó„Ç§„É≥„Ç∏„Ç±„Éº„Çø„Éº */}
      <div className="ai-step-indicator">
        {AI_STEPS.map((step, index) => (
          <div
            key={step.key}
            className={`ai-step-item ${currentStep === step.key ? 'active' : ''} ${
              index < currentStepIndex ? 'completed' : ''
            }`}
            onClick={() => handleStepClick(step.key)}
          >
            <div className="ai-step-icon">{step.icon}</div>
            <div className="ai-step-info">
              <div className="ai-step-title">{step.title}</div>
              <div className="ai-step-description">{step.description}</div>
            </div>
            
            {index < AI_STEPS.length - 1 && (
              <div className={`ai-step-connector ${index < currentStepIndex ? 'completed' : ''}`} />
            )}
          </div>
        ))}
      </div>

      {/* „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„Ç≥„É≥„Éà„É≠„Éº„É´ */}
      <div className="ai-step-controls">
        <button
          className="ai-step-button ai-step-button-prev"
          onClick={handlePrevious}
          disabled={currentStepIndex === 0 || !canGoPrev}
        >
          ‚Üê Ââç„Å∏
        </button>
        
        <div className="ai-step-counter">
          {currentStepIndex + 1} / {AI_STEPS.length}
        </div>
        
        <button
          className="ai-step-button ai-step-button-next"
          onClick={handleNext}
          disabled={currentStepIndex === AI_STEPS.length - 1 || !canGoNext}
        >
          Ê¨°„Å∏ ‚Üí
        </button>
      </div>
    </div>
  );
}