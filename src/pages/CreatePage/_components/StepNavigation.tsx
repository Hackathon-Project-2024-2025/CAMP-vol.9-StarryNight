import type { DesignStep } from '../../../types/common.types';
import './StepNavigation.css';

interface StepNavigationProps {
  currentStep: DesignStep;
  onStepChange: (step: DesignStep) => void;
}

interface StepInfo {
  key: DesignStep;
  title: string;
  icon: string;
  description: string;
}

const steps: StepInfo[] = [
  {
    key: 'base',
    title: '„Éô„Éº„ÇπÈÅ∏Êäû',
    icon: 'üêü',
    description: 'È≠ö„ÅÆÂü∫Êú¨‰ΩìÂûã„ÇíÈÅ∏Êäû'
  },
  {
    key: 'parts',
    title: '„Éë„Éº„ÉÑÈÅ∏Êäû',
    icon: '‚ú®',
    description: '„Éí„É¨„ÇÑÁõÆ„Å™„Å©„ÅÆ„Éë„Éº„ÉÑ„ÇíÈÅ∏Êäû'
  },
  {
    key: 'pattern',
    title: 'Ê®°ÊßòËøΩÂä†',
    icon: 'üåà',
    description: '‰Ωì„ÅÆÊ®°Êßò„Éë„Çø„Éº„É≥„ÇíÈÅ∏Êäû'
  },
  {
    key: 'accessory',
    title: '„Ç¢„ÇØ„Çª„Çµ„É™„Éº',
    icon: 'üëë',
    description: '„Ç¢„ÇØ„Çª„Çµ„É™„Éº„Åæ„Åü„ÅØ„É©„É≥„ÉÄ„É†ÁîüÊàê'
  },
  {
    key: 'customize',
    title: '‰ªï‰∏ä„Åí',
    icon: 'üé®',
    description: 'Ëâ≤„ÇÑ„Çµ„Ç§„Ç∫„ÇíË™øÊï¥'
  }
];

export default function StepNavigation({ currentStep, onStepChange }: StepNavigationProps) {
  const getCurrentStepIndex = () => {
    return steps.findIndex(step => step.key === currentStep);
  };

  const handleStepClick = (step: DesignStep) => {
    onStepChange(step);
  };

  const handlePrevious = () => {
    const currentIndex = getCurrentStepIndex();
    if (currentIndex > 0) {
      onStepChange(steps[currentIndex - 1].key);
    }
  };

  const handleNext = () => {
    const currentIndex = getCurrentStepIndex();
    if (currentIndex < steps.length - 1) {
      onStepChange(steps[currentIndex + 1].key);
    }
  };

  const currentStepIndex = getCurrentStepIndex();

  return (
    <div className="step-navigation">
      {/* „Çπ„ÉÜ„ÉÉ„Éó„Ç§„É≥„Ç∏„Ç±„Éº„Çø„Éº */}
      <div className="step-indicator">
        {steps.map((step, index) => (
          <div
            key={step.key}
            className={`step-item ${currentStep === step.key ? 'active' : ''} ${
              index < currentStepIndex ? 'completed' : ''
            }`}
            onClick={() => handleStepClick(step.key)}
          >
            <div className="step-icon">{step.icon}</div>
            <div className="step-info">
              <div className="step-title">{step.title}</div>
              <div className="step-description">{step.description}</div>
            </div>
            
            {index < steps.length - 1 && (
              <div className={`step-connector ${index < currentStepIndex ? 'completed' : ''}`} />
            )}
          </div>
        ))}
      </div>

      {/* „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„Éú„Çø„É≥ */}
      <div className="step-controls">
        <button
          className="step-button step-button-prev"
          onClick={handlePrevious}
          disabled={currentStepIndex === 0}
        >
          ‚Üê Ââç„Å∏
        </button>
        
        <div className="step-counter">
          {currentStepIndex + 1} / {steps.length}
        </div>
        
        <button
          className="step-button step-button-next"
          onClick={handleNext}
          disabled={currentStepIndex === steps.length - 1}
        >
          Ê¨°„Å∏ ‚Üí
        </button>
      </div>
    </div>
  );
}